
/* 

   T使用步骤：
   1. 创建一个 BLE Server
   2. 创建一个 BLE Service
   3. 创建一个 BLE Characteristic
   4. 创建一个 BLE Descriptor
   5. 开始服务
   6. 开始广播


*/
 #include <Arduino.h>
 #include <BLEDevice.h>
 #include <BLEServer.h>
 #include <BLEUtils.h>
 #include <BLE2902.h>
 #include "SSD1306Wire.h"
 #include "HardwareSerial.h"

 HWCDC SerialUSB; //USB串口对象
 /* 设置oled屏幕的相关信息 */  //有一些引脚接口不支持I2C 
 const int I2C_ADDR = 0x3c;              // oled屏幕的I2c地址
 #define SDA_PIN 0                       
 #define SCL_PIN 1                     
 /* 新建一个oled屏幕对象，需要输入IIC地址，SDA和SCL引脚号 */
 SSD1306Wire oled(I2C_ADDR, SDA_PIN, SCL_PIN);
 //测试屏幕显示
 void drawRect(void) {
   for (int16_t i=0; i<oled.getHeight()/2; i+=2) {
     oled.drawRect(i, i, oled.getWidth()-2*i, oled.getHeight()-2*i);
     oled.display();
     delay(50);
   }
 }

 std::string rx;
 uint8_t txValue = 0, mode = 0, temperature = 20, speed = 5, direct = 0;  
 uint8_t oldMode = 0, oldtemperature = 0, oldspeed = 0, olddirect = 0; //保存上次的模式                //后面需要发送的值
 BLEServer *pServer = NULL;                   //BLEServer指针 pServer
 BLECharacteristic *pTxCharacteristic = NULL; //BLECharacteristic指针 pTxCharacteristic
 bool deviceConnected = false;                //本次连接状态
 bool oldDeviceConnected = false;             //上次连接状态d
 bool opennn = false; //设备状态
 bool oldopennn = false; //上次设备状态


 #define SERVICE_UUID "d1537b56-6512-4a88-8ffc-cc7c49598710" // UART service UUID
 #define CHARACTERISTIC_UUID_RX "3cfdbf25-df32-4c08-b4b0-c2f66e81591a"
 #define CHARACTERISTIC_UUID_TX "0504163e-8a50-4694-8841-65ff708a4440"

 class MyServerCallbacks : public BLEServerCallbacks
 {
     void onConnect(BLEServer *pServer)
     {
         deviceConnected = true;
     };

     void onDisconnect(BLEServer *pServer)
     {
         deviceConnected = false;
     }
 };

 class MyCallbacks : public BLECharacteristicCallbacks
 {
     void onWrite(BLECharacteristic *pCharacteristic)
     {
         std::string rxValue = pCharacteristic->getValue(); //接收信息
         rx = rxValue;
         if(opennn){
             if (rxValue == "mode")
             {
                 mode++;
                 SerialUSB.print("mode: ");
                 SerialUSB.print(mode);
                 SerialUSB.println();
             }
             else if (rxValue == "tempup")
             {
                 temperature++;
                 SerialUSB.print("temperature: ");
                 SerialUSB.print(temperature);
                 SerialUSB.println();
             }
             else if (rxValue == "tempdown")
             {
                 temperature--;
                 SerialUSB.print("temperature: ");
                 SerialUSB.print(temperature);
                 SerialUSB.println();
             }
             else if (rxValue == "speedup")
             {
                 speed++;
                 SerialUSB.print("speed: ");
                 SerialUSB.print(speed);
                 SerialUSB.println();
             }
             else if (rxValue == "speeddown")
             {
                 speed--;
                 SerialUSB.print("speed: ");
                 SerialUSB.print(speed);
                 SerialUSB.println();
             }
             else if (rxValue == "direct")
             {
                 direct = !direct; // 切换方向
                 SerialUSB.print("direct: ");
                 SerialUSB.print(direct ? "Up" : "Down");
                 SerialUSB.println();
             } 
         }     
         if (rxValue == "open")
         {
             opennn = true; // 假设有一个变量 open 来表示设备状态
             SerialUSB.println("Device is ON");

         }
         else if (rxValue == "close")
         {
             opennn = false; // 假设有一个变量 open 来表示设备状态
             SerialUSB.println("Device is OFF");
         }
         else if (rxValue == "reset")
         {
             mode = 0;
             temperature = 20;
             speed = 5;
             direct = 0;
             opennn = false; // 假设有一个变量 open 来表示设备状态
             SerialUSB.println("Reset to default mode, temperature, speed and direction.");
         }

         else
         {
             SerialUSB.print("Unknown command: ");
             for (int i = 0; i < rxValue.length(); i++)
                 SerialUSB.print(rxValue[i]);
             SerialUSB.println();
         }
        

         if (rxValue.length() > 0)
         { //向串口输出收到的值
             SerialUSB.print("RX: ");
             for (int i = 0; i < rxValue.length(); i++)
                 SerialUSB.print(rxValue[i]);
             SerialUSB.println();
         }
     }
 };

 void setup()
 {
     SerialUSB.begin(9600);
     while (!SerialUSB) {
         delay(10);
     }

     oled.init();
     oled.flipScreenVertically();          // 设置屏幕翻转
     oled.setContrast(255);                // 设置屏幕亮度
     drawRect();                           // 测试屏幕显示
     oled.clear(); oled.display();         // 清除屏幕


     // 创建一个 BLE 设备
     BLEDevice::init("ESP32");//在这里面是ble的名称

     // 创建一个 BLE 服务
     pServer = BLEDevice::createServer();
     pServer->setCallbacks(new MyServerCallbacks()); //设置回调
     BLEService *pService = pServer->createService(SERVICE_UUID);

     // 创建一个 BLE 特征
     pTxCharacteristic = pService->createCharacteristic(CHARACTERISTIC_UUID_TX, BLECharacteristic::PROPERTY_NOTIFY);
     pTxCharacteristic->addDescriptor(new BLE2902());
     BLECharacteristic *pRxCharacteristic = pService->createCharacteristic(CHARACTERISTIC_UUID_RX, BLECharacteristic::PROPERTY_WRITE);
     pRxCharacteristic->setCallbacks(new MyCallbacks()); //设置回调

     pService->start();                  // 开始服务
     pServer->getAdvertising()->start(); // 开始广播
     SerialUSB.println(" 等待一个客户端连接，且发送通知... ");
 }

 void loop()
 {
     static uint8_t oldMode = 0, oldtemperature = 0, oldspeed = 0, olddirect = 0;
     static bool oldopennn = false;
     // deviceConnected 已连接
     if (deviceConnected)
     {
         if(opennn)
         {
             // 只在参数变化或opennn由false变为true时刷新OLED
             if ((oldMode != mode) || (oldtemperature != temperature) || (oldspeed != speed) || (olddirect != direct) || (!oldopennn && opennn))
             {
                 oled.clear();
                 oled.display();
                 oled.setFont(ArialMT_Plain_16);       // 设置字体
                 oled.drawString(0,0, "Mode:" + String(mode));
                 oled.drawString(0,15, "Temperature:" + String(temperature));
                 oled.drawString(0,30, "Speed:" + String(speed));
                 oled.drawString(0,45, "Direction:" + String(direct ? "Up" : "Down"));
                 oled.display();
                 oldMode = mode;
                 oldtemperature = temperature;
                 oldspeed = speed;
                 olddirect = direct;
             }
         }
         else
         {
             // opennn 由 true 变为 false 时清屏
             if (oldopennn) {
                 oled.clear();
                 oled.display();
             }
         }
         oldopennn = opennn;


         if (rx == "mode")
         {
             pTxCharacteristic->setValue(rx.c_str());   //状态回传
             pTxCharacteristic->notify();
             rx = ""; // 清空接收的值
         }
         else if(rx == "temperature")
         {
             pTxCharacteristic->setValue(rx.c_str());
             pTxCharacteristic->notify();
             rx = ""; // 清空接收的值
         }
         else if(rx == "speed")
         {
             pTxCharacteristic->setValue(rx.c_str());
             pTxCharacteristic->notify();
             rx = ""; // 清空接收的值
         }
         else if(rx == "direct")
         {
             pTxCharacteristic->setValue(rx.c_str());
             pTxCharacteristic->notify();
             rx = ""; // 清空接收的值
         }
         else if(rx == "reset")
         {
             pTxCharacteristic->setValue(rx.c_str());
             pTxCharacteristic->notify();
             rx = ""; // 清空接收的值
         }


         // pTxCharacteristic->setValue(&txValue, 1); // 设置要发送的值为1
         // pTxCharacteristic->notify();              // 广播
         // txValue++;                                // 指针数值自加1
         // delay(500);                              // 如果有太多包要发送，蓝牙会堵塞

     }

     // disconnecting  断开连接
     if (!deviceConnected && oldDeviceConnected)
     {
         SerialUSB.println(" 蓝牙已断开 ");
         delay(500);                  // 留时间给蓝牙缓冲
         pServer->startAdvertising(); // 重新广播
         SerialUSB.println(" 开始广播 ");
         oldDeviceConnected = deviceConnected;
     }

     // connecting  正在连接
     if (deviceConnected && !oldDeviceConnected)
     {
         // do stuff here on connecting
         oldDeviceConnected = deviceConnected;
     }

 }